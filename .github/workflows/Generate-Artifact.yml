name: Add Version deatils and Upload E2E Tests Artifact

on: [push]
  
jobs:
  build-and-upload:
    runs-on: windows-latest  # Use Windows runner to run PowerShell scripts

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v2  # Checkout the code from the PR merge

      # Step 2: Set up the environment (if necessary for your project)
      # For example, if you're using .NET, Node.js, etc., add those steps here
      # Example: Set up .NET (Uncomment if needed for your project)
      #  - name: Set up .NET
      #   uses: actions/setup-dotnet@v1
      #   with:
      #     dotnet-version: '6.0'  # Specify the version you're using

      # Step 3: Build Project (Customize based on your project)
      - name: Build the Project
        run: |
          # Assuming a .NET project, this is an example build step
          # Replace this with your actual build commands
          # Example: For a .NET project
          # dotnet build --configuration Release
          # Or for a Node.js project:
          # npm install && npm run build
          
          # For simplicity, let's assume you just want to prepare the E2E folder
          echo "Building or preparing the E2E tests..."
          # Custom build commands go here if needed
          # Example: Compile or prepare PowerShell tests (if needed)
          # For this example, let's simulate a build by creating a build folder:
          mkdir -p build
          echo "Simulated build process..." > build/build_output.txt

      # Step 4: Get the current version number from GITHUB_SHA (first 7 characters)
      - name: Get version number
        run: |
          # PowerShell code to extract the first 7 characters of GITHUB_SHA
          $version = $env:GITHUB_SHA.Substring(0, 7)  # Get first 7 characters of SHA
          Write-Host "Version: $version"  # Output version for debugging
          echo "VERSION=$version" >> $GITHUB_ENV  # Set the version to be used in other steps

      # Step 5: Prepare the artifact (collect PowerShell tests)
      - name: Collect PowerShell tests and build output
        run: |
          # Create an artifact directory
          New-Item -Path "artifact" -ItemType "Directory" -Force
          # Copy PowerShell test files from E2E folder to artifact folder
          Copy-Item -Path 'E2E\*' -Destination 'artifact\' -Recurse
          # Optionally, copy build output if you have it
          Copy-Item -Path 'build\*' -Destination 'artifact\' -Recurse

      # Step 6: List the artifact directory contents for debugging
      - name: List artifact directory contents
        run: |
          dir artifact

      # Step 7: Upload the artifact with the version number
      - name: Upload Artifact
        uses: actions/upload-artifact@v4.6.2  # Upload artifact action
        with:
          name: e2e-tests-${{ env.VERSION }}  # Artifact name with version number
          path: artifact/*  # Path to the collected files
          if-no-files-found: warn  # Don't fail if no files are found
          retention-days: 7  # Artifact retention period (optional)
          compression-level: 6  # Optional compression level
          overwrite: true  # Overwrite artifact if one with the same name exists
          include-hidden-files: false  # Do not include hidden files
